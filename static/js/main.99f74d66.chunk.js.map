{"version":3,"sources":["hooks/useSlots.js","components/ActionListItem/index.jsx","components/Modal/Dialog.jsx","components/Modal/Overlay.jsx","components/Modal/index.jsx","data/terms.js","App.js","serviceWorker.js","index.js"],"names":["useSlots","componentChildren","slots","React","Children","toArray","reduce","collector","child","slotName","props","slot","hasOwnProperty","push","general","name","defaultChildren","children","length","ActionListItem","Slot","className","Dialog","styled","div","Overlay","isOpen","forwardRef","ref","useState","setIsOpen","closeModal","useImperativeHandle","open","close","hasSlot","onClick","terms","word","type","defs","App","startingTerms","modalChildren","setModalChildren","modalRef","useRef","viewTerm","idx","term","key","map","def","current","style","textAlign","margin","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.99f74d66.chunk.js","sourcesContent":["import React from 'react';\n\nconst useSlots = (componentChildren) => {\n    const slots = React.Children.toArray(componentChildren).reduce(\n        (collector, child) => {\n            const slotName = child.props.slot || 'general';\n            if (!collector.hasOwnProperty(slotName)) {\n                collector[slotName] = [];\n            }\n            collector[slotName].push(child);\n            return collector;\n        },\n        {general: []}\n    );\n    return [\n        ({name, children: defaultChildren}) => {\n            const children = !name\n                ? slots.general\n                : (slots.hasOwnProperty(name) ? slots[name] : defaultChildren);\n            return (<>{children}</>);\n        },\n        (slot) => slots.hasOwnProperty(slot) && slots[slot].length,\n    ]\n};\n\nexport default useSlots;","import React from 'react';\nimport useSlots from '../../hooks/useSlots';\nimport './styles.scss';\n\nconst ActionListItem = ({children}) => {\n    const [Slot] = useSlots(children);\n    return (\n    <li className='actionitem'>\n        <span>\n            <Slot name='actions'></Slot>\n        </span>\n        <h4><Slot name='title'>Unnamed Item</Slot></h4>\n    </li>\n    )\n};\n\nexport default ActionListItem;","import styled from \"styled-components\";\n\nconst Dialog = styled.div`\n    width: 500px;\n    margin: 200px auto 0;\n\n    header {\n        background-color: #fff;\n        border-radius: 10px 10px 0 0;\n        padding: 4px 10px;\n        position: relative;\n\n        h2 {\n            margin: 0;\n            font-size: 21px;\n        }\n\n        button {\n            position: absolute;\n            top: 4px;\n            right: 0;\n            background: none;\n            border: none;\n            font-weight: bold;\n            font-size: 21px;\n        }\n    }\n\n    main {\n        background-color: #fff;\n        padding: 10px;\n        border-top: 1px solid #333;\n\n        &:last-child {\n            border-radius: 0 0 10px 10px;\n            padding-bottom: 15px;\n        }\n\n        p {\n            margin: 0;\n        }\n\n        ol {\n            padding: 0;\n            margin: 10px 0 0;\n            counter-reset: defs;\n            list-style: none;\n\n            li {\n                position: relative;\n                padding-left: 20px;\n                counter-increment: defs;\n\n                &::before {\n                    content: counter(defs);\n                    position: absolute;\n                    left: 0px;\n                }\n\n                & ~ li {\n                    margin-top: 15px;\n                }\n            }\n        }\n    }\n\n    footer {\n        background-color: #fff;\n        padding: 10px;\n        border-top: 1px solid #333;\n        text-align: right;\n\n        &:last-child {\n            border-radius: 0 0 10px 10px;\n            padding-bottom: 15px;\n        }\n\n        button {\n            background-color: #eee;\n            border-radius: 4px;\n            border: 1px solid #333;\n            padding: 4px;\n        }\n    }\n`;\n\nexport default Dialog;","import styled from 'styled-components';\n\nconst Overlay = styled.div`\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: rgba(0,0,0,0.4);\n    display: ${props => (props.isOpen) ? 'block' : 'none'}\n`;\n\nexport default Overlay;","import React, { forwardRef, useImperativeHandle, useState } from 'react';\nimport useSlots from '../../hooks/useSlots';\nimport Dialog from './Dialog';\nimport Overlay from './Overlay';\n\nconst Modal = ({children}, ref) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const closeModal = () => setIsOpen(false);\n\n    useImperativeHandle(ref, () => ({\n        open: () => setIsOpen(true),\n        close: closeModal\n    }));\n\n    const [Slot, hasSlot] = useSlots(children);\n\n\n    if (!isOpen) {\n        return null;\n    }\n    return (\n        <Overlay isOpen={isOpen} onClick={closeModal}>\n            <Dialog>\n                <header>\n                    <h2><Slot name='title'>Word Dictionary Definition</Slot></h2>\n                    <button onClick={closeModal}>&times;</button>\n                </header>\n                <main>\n                    <Slot></Slot>\n                </main>\n                {\n                    hasSlot('buttons') && <footer>\n                        <Slot name='buttons'></Slot>\n                    </footer>\n                }\n            </Dialog>\n        </Overlay>\n    );\n};\n\nexport default forwardRef(Modal);","const terms = [\n    {\n      word: 'carburation',\n      type: 'noun',\n      defs: [\n        'the process of mixing a hydrocarbon fuel with a correct amount of air to make an explosive mixture for an internal-combustion engine'\n      ]\n    },\n    {\n      word: 'thruster',\n      type: 'noun',\n      defs: [\n        'a person or thing that thrusts.',\n        'Fox Hunting: a rider who keeps in the front of the field.',\n        'Aerospace: a small rocket attached to a spacecraft and used to control its attitude or translational motion.'\n      ]\n    },\n    {\n      word: 'mobilize',\n      type: 'verb',\n      defs: [\n        'to assemble or marshal (armed forces, military reserves, or civilian persons of military age) into readiness for active service.',\n        'to organize or adapt (industries, transportation facilities, etc.) for service to the government in time of war.',\n        'to marshal, bring together, prepare (power, force, wealth, etc.) for action, especially of a vigorous nature: \"to mobilize one\\'s energy\".',\n        'to increase or bring to a full stage of development: \"to mobilize one\\'s anger\".',\n        'to be or become assembled, organized, etc., as for war: \"to mobilize for action\".'\n      ]\n    },\n    {\n      word: 'hokku',\n      type: 'noun (plural)',\n      defs: [\n        'the opening verse of a linked verse series.',\n        'haiku'\n      ]\n    },\n    {\n      word: 'bisulphate',\n      type: 'noun',\n      defs: [\n        'a salt or ester of sulphuric acid containing the monovalent group -HSO 4 or the ion HSO 4 –',\n        '(modifier) consisting of, containing, or concerned with the group -HSO 4 or the ion HSO 4 –bisulphate ion'\n      ]\n    }\n  ]\n\n  export default terms;","import React, { useRef, useState } from 'react';\nimport ActionListItem from './components/ActionListItem';\nimport Modal from './components/Modal';\nimport startingTerms from './data/terms';\n\nconst App = () => {\n  \n  const [terms] = useState(startingTerms);\n  const [modalChildren, setModalChildren] = useState([]);\n  const modalRef = useRef(null);\n\n  const openModal = () => {\n    modalRef.current.open();\n  };\n\n  const viewTerm = (idx) => () => {\n    const term = terms[idx];\n    setModalChildren([\n      <span key='modal_title' slot='title'>{term.word}</span>,\n      <p key='modal_term_type'><em>{term.type}</em></p>,\n      <ol key='modal_term_defs'>{term.defs.map((def, idx) => (<li key={`def_${idx}`}>{def}</li>))}</ol>,\n    ]);\n    openModal();\n  };\n\n  return (\n    <div>\n      <h1 style={{textAlign: 'center'}}>Modal Demo using Web Component-like \"Slots\"</h1>\n      <ul style={{margin: '0 auto', maxWidth: '900px'}}>\n        {\n          terms.map((word, idx) => (\n            <ActionListItem key={idx}>\n              <span slot='title'>{word.word}</span>\n              <button slot='actions' onClick={viewTerm(idx)}>View</button>\n            </ActionListItem>\n          ))\n        }\n      </ul>\n\n      <Modal ref={modalRef}>{modalChildren}</Modal>\n    </div>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App></App>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}